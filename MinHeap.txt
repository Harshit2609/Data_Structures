#include <stdio.h>
#include <stdlib.h>

void MinHeapify(int );
void insertKey(int );
void swap(int *x, int *y);
int x;
int left(int) ;
int right(int) ;
int parent(int);

int *harr; // pointer to array of elements in heap
int capacity; // maximum possible size of min heap
int heap_size; // Current number of elements in min heap
int main()
{

    MinHeap (11);
    insertKey(3);
    insertKey(2);
    insertKey(15);
    insertKey(5);
    insertKey(4);
    insertKey(45);
    printf("HEAP CREATED SUCCESSFULLY!!! \n");
    printf("MIN ELEMENT IS : %d",getMin());
    display();
    return 0;

}

int parent(int i) { return (i-1)/2; }

int left(int i) { return (2*i + 1); }

int right(int i) { return (2*i + 2); }

void insertKey(int k)
{
    if (heap_size == capacity)
    {
        printf("\nOverflow: Could not insertKey\n");
        return;
    }


    heap_size++;
    int i = heap_size - 1;
    harr[i] = k;


    while (i != 0 && harr[parent(i)] > harr[i])
    {
       swap(&harr[i], &harr[parent(i)]);
       i = parent(i);  //IMP
    }
}

void MinHeapify(int i)
{
    int l = left(i);
    int r = right(i);
    int smallest = i;
    if (l < heap_size && harr[l] < harr[i])
        smallest = l;
    if (r < heap_size && harr[r] < harr[smallest])
        smallest = r;
    if (smallest != i)
    {
        swap(&harr[i], &harr[smallest]);
        MinHeapify(smallest);
    }
}

void swap(int *x, int *y)
{
    int temp = *x;
    *x = *y;
    *y = temp;
}


void MinHeap(int cap)
{
    heap_size = 0;
    capacity = cap;
    harr = malloc(sizeof(cap));
}

int getMin() { return harr[0]; }


void display()
{

    for(x=0;x<7;x++)
    {
        printf("\n Heap is :----->%d",harr[x]);
    }

}

